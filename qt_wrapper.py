from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, \
                            QDialog,  QSpacerItem, QMessageBox, QTabWidget, QLineEdit
from PyQt5.QtCore import QSize, Qt, QDir, QFileInfo


class ForensicGUI(QDialog):

    def __init__(self, parent, title):
        super(QDialog, self).__init__()

        QDialog.__init__(self, windowTitle=title, size=QSize(500, 300))
        self.tabs = QTabWidget()
        self.path_tab = QWidget()
        self.tabs.addTab(self.path_tab, "Paths")
        self.project_folder_object = QLineEdit(QDir.currentPath())
        self.old_directory = QDir.currentPath()
        self.image_output_folder_object = QLineEdit(QDir.currentPath() + "/image")
        self.analysis_output_folder_object = QLineEdit(QDir.currentPath() + "/analysis")
        self.base_input_file_object = QLineEdit(QDir.currentPath() + "/base/base.vmdk")
        self.test_input_folder_object = QLineEdit(QDir.currentPath() + "/test")
        self.fill_input_folder_object = QLineEdit(QDir.currentPath() + "/fill")
        self.return_value = 0

        self.vbox = QVBoxLayout()
        self.vbox.setSpacing(0)

        self.create_label("INPUT DIRECTORIES", 5)
        self.create_form(self.project_folder_object, "Project directory (will populate other directories unless they"
                                                           " have already been specified)", "Input", 5)
        self.create_form(self.image_output_folder_object, "Working image", "Image", 5)
        self.create_form(self.analysis_output_folder_object, "Analysis", "Analysis", 20)
        self.create_label("OUTPUT DIRECTORIES", 5)
        self.create_form(self.base_input_file_object, "Location of base image", "Base", 5)
        self.create_form(self.test_input_folder_object, "Location of test files", "Test", 5)
        self.create_form(self.fill_input_folder_object, "Location of dummy fill files", "Fill", 5)
        self.vbox.addSpacing(20)

        cancel_button = QPushButton("Cancel")
        cancel_button.clicked.connect(self.close_event)
        okay_button = QPushButton("Okay")
        okay_button.clicked.connect(self.validate_event)
        hbox = QHBoxLayout()
        hbox.addWidget(cancel_button)
        hbox.addStretch()
        hbox.addWidget(okay_button)
        self.vbox.addLayout(hbox)
        self.path_tab.setLayout(self.vbox)
        self.main_vbox = QVBoxLayout()
        self.main_vbox.addWidget(self.tabs)
        self.setLayout(self.main_vbox)
        self.show()

    def create_form(self, input_object, folder_label, button_label, spacing):
        label_object = QLabel(folder_label)
        button_object = QPushButton(button_label)
        button_object.setObjectName(button_label)
        button_object.clicked.connect(self.button_clicked_event)
        self.vbox.addWidget(label_object)
        hbox = QHBoxLayout()
        hbox.addWidget(input_object)
        hbox.addSpacing(20)
        hbox.addWidget(button_object)
        self.vbox.addLayout(hbox, Qt.AlignTop)
        self.vbox.addSpacing(spacing)

    def create_label(self, label_text, spacing):
        hbox = QHBoxLayout()
        hbox.setAlignment(Qt.AlignCenter)
        hbox.addWidget(QLabel(label_text))
        self.vbox.addLayout(hbox)
        self.vbox.addSpacing(spacing)

    # Return folder names in native format so other modules don't need to import QDir
    def list_folder_names(self):
        return [QDir.toNativeSeparators(self.project_folder_object.text()),
                QDir.toNativeSeparators(self.image_output_folder_object.text()),
                QDir.toNativeSeparators(self.analysis_output_folder_object.text()),
                QDir.toNativeSeparators(self.base_input_file_object.text()),
                QDir.toNativeSeparators(self.test_input_folder_object.text()),
                QDir.toNativeSeparators(self.fill_input_folder_object.text())]

    def set_directories(self, new_directory):
        if self.old_directory != new_directory:
            self.project_folder_object.setText(new_directory)
            if self.image_output_folder_object.text() == self.old_directory + "/image":
                self.image_output_folder_object.setText(new_directory + "/image")
            if self.analysis_output_folder_object.text() == self.old_directory + "/analysis":
                self.analysis_output_folder_object.setText(new_directory + "/analysis")
            if self.base_input_file_object.text() == self.old_directory + "/base/base.raw":
                self.base_input_file_object.setText(new_directory + "/base/base.raw")
            if self.test_input_folder_object.text() == self.old_directory + "/test":
                self.test_input_folder_object.setText(new_directory + "/test")
            if self.fill_input_folder_object.text() == self.old_directory + "/fill":
                self.fill_input_folder_object.setText(new_directory + "/fill")
            self.old_directory = new_directory


    def check_if_files(self, directory):
        qt_directory = QDir(directory, "*", sort=QDir.DirsFirst | QDir.IgnoreCase | QDir.Name,
                            filters=QDir.Files | QDir.NoDotAndDotDot)
        if qt_directory.count():
            return True
        else:
            return False

    def check_if_files_or_folders(self, directory):
        qt_directory = QDir(directory, "*", sort=QDir.DirsFirst | QDir.IgnoreCase | QDir.Name,
                            filters=QDir.Files | QDir.Dirs | QDir.NoDotAndDotDot)
        if qt_directory.count():
            return True
        else:
            return False

    def warning_prompt(self, title, text):
        warning_message = QMessageBox()
        warning_message.setIcon(QMessageBox.Warning)
        warning_message.setText(text)
        warning_message.setWindowTitle(title)
        warning_message.exec()

    def validation_confirm(self, error_level, title, text):
        validation_dialog = QMessageBox()
        validation_dialog.setIcon(error_level)
        validation_dialog.setWindowTitle(title)
        validation_dialog.setText(text)
        validation_dialog.setIcon(error_level)
        if error_level == QMessageBox.Question:
            validation_dialog.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            reply = validation_dialog.exec()
            if reply == QMessageBox.Yes:
                self.close_success()
        elif error_level == QMessageBox.Warning:
            validation_dialog.setIcon(QMessageBox.Warnning)
            validation_dialog.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            reply = validation_dialog.exec()
            if reply == QMessageBox.Yes:
                self.close_success()
        else:
            validation_dialog.setIcon(QMessageBox.Critical)
            validation_dialog.setStandardButtons(QMessageBox.Ok)
            validation_dialog.exec()

    def button_clicked_event(self):
        sending_object_name = self.sender().objectName()
        folder_picker_dialog = QFileDialog()
        folder_picker_dialog.setFileMode(QFileDialog.DirectoryOnly)

        if sending_object_name == "Input":
            new_directory = folder_picker_dialog.getExistingDirectory(self, 'Select a Project Folder',
                                                                      self.project_folder_object.text())
            if QDir(new_directory).exists():
                self.set_directories(new_directory)
        elif sending_object_name == "Image":
            new_directory = folder_picker_dialog.getExistingDirectory(self, 'Select folder to store working image',
                                                                      self.image_output_folder_object.text())
            if QDir(new_directory).exists():
                self.image_output_folder_object.setText(new_directory)
                if self.check_if_files_or_folders(new_directory):
                    self.warning_prompt("Warning: directory not empty", "The working image directory is not empty. Data"
                                        " may be inadvertently overwritten if you proceed.")

        elif sending_object_name == "Analysis":
            new_directory = folder_picker_dialog.getExistingDirectory(self, 'Select folder to analysis and output',
                                                                      self.analysis_output_folder_object.text())
            if new_directory:
                self.analysis_output_folder_object.setText(new_directory)
                if self.check_if_files_or_folders(new_directory):
                    self.warning_prompt("Warning: directory not empty", "The analysis/output directory is not empty." 
                                        " Data may be inadvertently overwritten if you proceed.")
        elif sending_object_name == "Base":
            new_path = folder_picker_dialog.getOpenFileName(self, 'Select base image file',
                                                            self.base_input_file_object.text())
            if new_path:
                if QFileInfo(new_path[0]).exists():
                    self.base_input_file_object.setText(new_path[0])
                else:
                    self.warning_prompt("Base Image Not Found", "Base Image file cannot be found. Please select "
                                        "an existing file")
        elif sending_object_name == "Test":
            new_directory = folder_picker_dialog.getExistingDirectory(self, 'Select folder where test files are stored',
                                                                      self.test_input_folder_object.text())
            if new_directory:
                self.test_input_folder_object.setText(new_directory)
                if not self.check_if_files_or_folders(new_directory):
                    self.warning_prompt("Warning: no test files detected", "No experimental files found in directory"
                                        " Please select a directory containing experimental files.")
        elif sending_object_name == "Fill":
            new_directory = folder_picker_dialog.getExistingDirectory(self, 'Select folder where fill files is stored',
                                                                      self.fill_input_folder_object.text())
            if new_directory:
                self.fill_input_folder_object.setText(new_directory)
                if not self.check_if_files_or_folders(new_directory):
                    self.warning_prompt("Warning: no fill files detected", "No fill files found in directory"
                                        " Please select a directory containing fill (non-experimental) files.")
                    if not self.check_if_files(new_directory):
                        self.warning_prompt("Warning: functionality not implemented", "This software expects the fill"
                                            "files to reside un-nested in the specified directory.")

    def validate_event(self):
        warnings = ""
        errors = ""
        if (self.image_output_folder_object.text() == self.analysis_output_folder_object.text()):
            warnings += "Warning: It is recommended to store intermediate images and anaylsis/output in separate " \
                        "folders.\n"
        if (self.image_output_folder_object.text() == self.base_input_file_object.text()) or \
           (self.image_output_folder_object.text() == self.test_input_folder_object.text()) or \
           (self.image_output_folder_object.text() == self.fill_input_folder_object.text()):
            errors += "Error: Intermediate output must be stored separately from the base system image, experimental" \
                      " files, and fill files.\n"
        if (self.analysis_output_folder_object.text() == self.base_input_file_object.text()) or \
           (self.analysis_output_folder_object.text() == self.test_input_folder_object.text()) or \
           (self.analysis_output_folder_object.text() == self.fill_input_folder_object.text()):
           errors += "Error: Analysis/output must be stored separately from the base system image, experimental" \
                    " files, and fill files.\n"
        if (self.test_input_folder_object.text() in self.base_input_file_object.text()) or \
           (self.fill_input_folder_object.text() in self.base_input_file_object.text()):
           errors += "Error: Base system image must be stored in separate, non-nested directories from the " \
                     "experimental files and fill files.\n"
        if (self.test_input_folder_object.text() in self.fill_input_folder_object.text()) or \
           (self.fill_input_folder_object.text() in self.test_input_folder_object.text()):
           errors += "Error: Experimental files and fill files must be in separate, non-nested directories.\n"
        if errors:
            self.validation_confirm(QMessageBox.Critical, "Errors detected", errors + warnings)
        # NEEDS MODIFICATION
        elif warnings:
            self.validation_confirm(QMessageBox.Warning, "Warnings detected. Proceed with validation?", warnings)
        else:
            self.validation_confirm(QMessageBox.Question, "Proceed with validation?", "No warnings or errors detected.")

    def close_success(self):
        self.done(1)

    def close_event(self):
        self.done(0)


