from PyQt5.QtWidgets import QApplication
import ssh_sftp_wrapper as ssh
import qt_wrapper as qt
import vbox_wrapper_2 as vm
import forensic_wrapper as fw
import virus_scanner_wrapper as vs
from sys import stdout
from os import path, listdir
from os import name as osname
import virtualbox
from time import sleep
from datetime import datetime
import re
import ntpath


def main():
    """ Qt Application removed for Paramiko testing
    # Open input dialog, obtain list of folders, then close dialog
    app = QApplication([])
    input_gui = qt.ForensicGUI(None, "Forensic Tool Testing")
    input_gui.exec()
    input_gui.close()
    path_list = input_gui.list_folder_names()
    app.quit()
    """
    # Set parameters for virtual machine
    defaults = {}
    with open("Win_Target.txt") as defaults_file:
        for line in defaults_file:
            variable, value = line.strip().split(': ', 1)
            defaults[variable] = value
    project_path = defaults["project_path"]
    log_path = defaults["log_path"]
    image_path = defaults["image_path"]
    vm_path = defaults["vm_path"]
    # vm_name = defaults["vm_name"]
    remote_username = defaults["remote_username"]
    remote_password = defaults["remote_password"]
    remote_type = defaults["remote_type"]
    remote_port = int(defaults["remote_port"])
    timeout_seconds = int(defaults["timeout_seconds"])
    media_path = defaults["media_path"]
    virus_path = defaults["virus_path"]
    remote_path = defaults["remote_path"]
    remote_ftp_path = defaults["remote_ftp_path"]
    block_size = int(defaults["block_size"])
    mount_offset = str(int(defaults["mount_offset"]) * block_size)
    compare_offset = int(defaults["compare_offset"]) * block_size
    boot_delay = int(defaults["boot_delay"])
    ip_delay = int(defaults["ip_delay"])
    infect_delay = int(defaults["ip_delay"])
    shutdown_delay = int(defaults["shutdown_delay"])
    # remote_ip = defaults["remote_ip"]
    virus_scanners = defaults["virus_scanners"]
    items = []
    item_names = []
    counter = -1


    # Prepare iterator based on contents of virus path. We are going to iterate once for each item (folder or file)
    # in the directory

    for item in listdir(virus_path):
        items.append(path.join(virus_path, item))
        item_names.append(item)
    print(items)
    for item in items:
        executable_files = []
        counter += 1
        time_string = datetime.now().strftime("%Y-%m-%d_%H%M%S")

        # Start virtual machine in headless mode, obtain IP address
        logfile = open(path.join(log_path, time_string + "__main__" + ".log"), "w")
        logfile.write("Starting virtual machine module.\n")
        vm_object = vm.VMManage()
        logfile.write("Setting logfile.\n")
        vm_object.set_logfile(path.join(log_path, time_string + "__vbox__" + ".log"))
        logfile.write("Setting VM from path {}.\n".format(vm_path))
        vm_object.set_vm(vm_disk_path_string=vm_path, vm_manager_value=vm.VMManage.VIRTUALBOX,
                         vm_timeout_value=timeout_seconds)

        # Clone drive and check the data on the partitions of the drive. Do not check data that may vary due to UUID
        # or other virtualbox-related settings

        logfile.write("Cloning raw drive.\n")
        forensic_ops = fw.ForensicUtility()
        forensic_ops.set_logfile(path.join(log_path, time_string + "__forensic_utility__" + ".log"))
        working_filename = "working_" + time_string + ".raw"
        working_path = path.join(image_path, working_filename)
        if not forensic_ops.vboxmanage_clone_and_verify(input_file=vm_path, output_file=working_path,
                                                        offset=compare_offset):
            logfile.write("\tFailed to identically clone {} to {} - application terminating unsuccessfully."
                          "\n".format(vm_path, path.join(image_path, working_path)))
            exit()
        logfile.write("\tSuccessfully cloned {} as {}\n".format(vm_path, working_path))

        # Attach clone drive to target virtual machine

        logfile.write("Opening cloned drive.\n")
        vm_object.print_attachments()
        vm_object.open_drive(working_path)
        logfile.write("Attaching cloned drive.\n")
        vm_object.attach_opened_medium()
        vm_object.print_attachments()

        # Start VM and detect the VM's IP address

        logfile.write("Starting VM.\n")
        vm_object.start_vm()
        sleep(boot_delay)
        logfile.write("Obtaining IP from VM.\n")
        ip_address_string = vm_object.obtain_vm_ip()
        sleep(ip_delay)

        # Establish SSH connection to VM

        ssh_object = ssh.SSHManage()
        ssh_object.set_logfile(path.join(log_path, time_string + "__ssh__" + ".log"))
        ssh_object.configure_connection(ip_address_string, username=remote_username, password=remote_password,
                                        port=remote_port)
        logfile.write("\tAttempting to obtain SSH/SFTP connection to {}.\n".format(ip_address_string))
        for i in range(0, timeout_seconds):
            if ssh_object.start_connection():
                break
            elif i == timeout_seconds - 1:
                logfile.write("Failed to establish SSH/SFTP connection - application terminating unsuccessfully.\n")
                exit()
            sleep(.1)

        # Get UUID of cloned drive

        uuid = forensic_ops.get_uuid_from_virtual_disk(working_path)
        logfile.write("UUID: {}\n".format(uuid))

        # Make SFTP connection and send test files (removing any current directory)
        ssh_object.start_connection()
        ssh_object.start_sftp()
        if path.isdir(item):
            logfile.write("\tOverwriting remote contents at {} with local contents at {}."
                          "\n".format(remote_path, item))
            ssh_object.delete_recreate_and_put_directory(input_directory=item, output_ftp_directory=remote_ftp_path,
                                                         output_directory=remote_path, os_type=remote_type)
            for virus_item in listdir(item):
                if remote_type == "windows":
                    if len(virus_item) > 4 and virus_item[-4:] == ".exe":
                        executable_files.append(ntpath.join(remote_path, item_names[counter], virus_item))
        else:
            logfile.write("\tPutting local contents {} to {}\n".format(item, remote_ftp_path))
            ssh_object.put(input_path=item, output_path=ntpath.join(remote_ftp_path, item_names[counter]))
            if len(item) > 4 and item[-4:] == ".exe":
                executable_files.append(ntpath.join(remote_path, item_names[counter]))
        for executable in executable_files:
            logfile.write('\tExecuting start /B "{}" on remote VM\n'.format(executable))
            ssh_object.send_command('start /B "{}"'.format(executable))
        sleep(infect_delay)

        # Shutdown VM and check to see if VM is off

        logfile.write("\tSending shutdown command to {} through SSH.\n".format(ip_address_string))
        if remote_type == "windows":
            ssh_object.send_command("shutdown /s /t 0")
        else:
            ssh_object.send_sudo_command("sudo -S -p '' poweroff".format(), password=remote_password)
        ssh_object.close()
        sleep(shutdown_delay)
        for i in range(0, timeout_seconds*10):
            if vm_object.check_vm_shutdown():
                break
            sleep(.1)

        # Wait for VM unlock, attach original media, close VM

        vm_object.wait_for_vm_unlock()
        vm_object.reattach_original_medium()
        vm_object.print_attachments()
        vm_object.close()

        forensic_ops.nopasswd_mount_image(working_path, media_path, str(mount_offset))
        sleep(.1)
        # Scan and log for each virus scanner listed in config file

        for virus_scanner in virus_scanners.split(","):
            logfile.write("Invoking {} on {}.\n".format(virus_scanner, item))
            forensic_ops.set_tool_logfile(path.join(log_path, time_string + "__tool__" + virus_scanner + "__.log"))
            forensic_ops.tool_test(virus_scanner, media_path)
            forensic_ops.close_tool_logfile()

        # Close logfiles
        forensic_ops.nopasswd_unmount_image(media_path)
        forensic_ops.close()
        if logfile != stdout:
            logfile.close()


if __name__ == '__main__':
    main()
